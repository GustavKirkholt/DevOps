{"version":3,"sources":["GiraffeStore.js","App.js","About.js","reportWebVitals.js","index.js"],"names":["giraffestore","props","giraffes","state","makeAutoObservable","this","autoBind","fetchGiraffes","fetch","then","response","ok","json","runInAction","error","observer","className","Button","onClick","addGiraffe","classes","root","noValidate","autoComplete","TextField","id","label","variant","map","giraffeName","key","About","withRouter","history","match","console","log","params","text","color","push","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","path","component","App","exact","document","getElementById"],"mappings":"2OA+BaA,EAAe,I,WArBxB,WAAYC,GAAQ,yBAHpBC,SAAW,CAAC,uBAGO,KAFnBC,MAAQ,CAAC,IAEU,KAKnBA,MAAQ,UAJJC,YAAmBC,KAAK,GAAG,CAACC,UAAS,IACrCD,KAAKE,gB,iDAKT,WAAiB,IAAD,OACZ,IACIC,MAAgB,iBAAiBC,MAC7B,SAACC,GACIA,EAASC,GACR,EAAKR,MAAQ,OADA,EAAKA,MAAQ,SAEhCO,EAASE,OAAOH,MACZ,SAACG,GAAD,OAASC,aAAY,kBAAI,EAAKX,SAASU,WAGjD,MAAOE,GAAQT,KAAKF,MAAQ,c,qBCSvBY,mBA7Bf,WAEI,OACI,qBAAKC,UAAU,MAAf,SACI,yBAAQA,UAAU,aAAlB,UACI,6BAAKhB,EAAaG,QAClB,gCACI,cAACc,EAAA,EAAD,CAAQC,QAAS,kBAAIlB,EAAamB,WAAW,UAA7C,6BACA,0BAEJ,8BACI,sBAAMH,UAAWI,UAAQC,KAAMC,YAAU,EAACC,aAAa,MAAvD,SACI,cAACC,EAAA,EAAD,CAAWC,GAAG,eAAeC,MAAM,SAASC,QAAQ,eAG5D,uBACA,8BACI,6BACK3B,EAAaE,SAAS0B,KAAI,SAACC,EAAYC,GAAb,OACvB,6BAAeD,GAANC,kB,OCftBC,EARDC,aAAW,YAAoB,IAAlBC,EAAiB,EAAjBA,QAAQC,EAAS,EAATA,MAG/B,OAFAC,QAAQC,IAAIH,GACZE,QAAQC,IAAIF,GACL,gCAAK,wCAAWA,EAAMG,OAAOC,QAChC,cAACrB,EAAA,EAAD,CAAQU,QAAQ,YAAYY,MAAM,UAAUrB,QAAS,kBAAIe,EAAQO,KAAK,MAAtE,+BCKOC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBlC,MAAK,YAAkD,IAA/CmC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,QCCdO,IAASC,OACH,cAAC,IAAD,UACI,eAAC,IAAD,WACI,cAAC,IAAD,CAAOC,KAAM,OAAQC,UAAWC,IAChC,cAAC,IAAD,CAAOF,KAAM,eAAgBC,UAAWrB,IACxC,cAAC,IAAD,CAAOuB,OAAK,EAACH,KAAM,IAAKD,OAAQ,kBAAI,8CACpC,cAAC,IAAD,CAAOA,OAAQ,kBAAI,6CAG/BK,SAASC,eAAe,SAM1Bf,M","file":"static/js/main.045cb6fe.chunk.js","sourcesContent":["import {makeAutoObservable, runInAction} from \"mobx\"\n\nconst baseUrl = process.env.NODE_ENV === 'development' ?\n    \"http://localhost:8080/\":\"\"; //Check if dev environment\n\nclass GiraffeStore {\n\n    giraffes = [\"Loading Giraffes...\"];\n    state = [\"\"];\n\n    constructor(props) {\n        makeAutoObservable(this,{},{autoBind:true});\n        this.fetchGiraffes();\n    }\n\n    state = \"Loading\"\n\n    fetchGiraffes (){\n        try{\n            fetch(baseUrl + \"rest/giraffes\").then(\n                (response)=>\n                {if(!response.ok) {this.state = \"Failed\"}\n                else {this.state = \"Done\"}\n                response.json().then(\n                    (json)=> runInAction(()=>this.giraffes=json),\n                )}\n            )\n        } catch (error) {this.state = \"Failed\"}\n    }\n}\n\nexport const giraffestore = new GiraffeStore();","import './App.css';\nimport Button from \"@material-ui/core/Button\";\nimport {TextField} from \"@material-ui/core\";\nimport {classes} from \"istanbul-lib-coverage\";\nimport {giraffestore} from \"./GiraffeStore\";\nimport { observer } from \"mobx-react-lite\";\n\nfunction App() {\n\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                <h1>{giraffestore.state}</h1>\n                <div>\n                    <Button onClick={()=>giraffestore.addGiraffe(\"Elmer\")}>Tilf√∏j giraf</Button>\n                    <h1></h1>\n                </div>\n                <div>\n                    <form className={classes.root} noValidate autoComplete=\"off\">\n                        <TextField id=\"filled-basic\" label=\"Filled\" variant=\"filled\" />\n                    </form>\n                </div>\n                <h1></h1>\n                <div>\n                    <ul>\n                        {giraffestore.giraffes.map((giraffeName,key)=>\n                            <li key={key}>{giraffeName}</li>\n                        )}\n                    </ul>\n                </div>\n            </header>\n        </div>\n\n    );\n}\n\nexport default observer(App);\n","import Button from \"@material-ui/core/Button\";\nimport { withRouter } from \"react-router\";\n\nconst About = withRouter(({history,match})=>{\n    console.log(history);\n    console.log(match);\n    return <div><h1>About {match.params.text}</h1>\n        <Button variant=\"contained\" color=\"primary\" onClick={()=>history.push(\"/\")}>Go to front</Button>\n    </div>\n});\n\nexport default About;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport About from './About';\nimport reportWebVitals from './reportWebVitals';\nimport {HashRouter, Route, Switch } from \"react-router-dom\";\n\nReactDOM.render(\n      <HashRouter>\n          <Switch>\n              <Route path={\"/app\"} component={App}></Route>\n              <Route path={\"/about/:text\"} component={About}></Route>\n              <Route exact path={\"/\"} render={()=><h1>Startside</h1>}></Route>\n              <Route render={()=><h1>404</h1>}/>\n          </Switch>\n      </HashRouter>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
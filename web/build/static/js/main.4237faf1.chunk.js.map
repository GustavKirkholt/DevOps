{"version":3,"sources":["GiraffeStore.js","App.js","About.js","reportWebVitals.js","index.js"],"names":["giraffestore","props","giraffes","state","makeAutoObservable","this","observable","autoBind","fetchGiraffes","fetch","then","response","json","runInAction","catch","newGiraffe","method","headers","body","JSON","stringify","console","log","error","observer","className","Button","onClick","postGiraffess","classes","root","noValidate","autoComplete","TextField","id","label","variant","map","giraffeName","key","About","withRouter","history","match","params","text","color","push","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","path","component","App","exact","document","getElementById"],"mappings":"2OAgEaA,EAAe,I,WArDxB,WAAYC,GAAQ,yBAJpBC,SAAW,CAAC,uBAIO,KAHnBC,MAAQ,CAAC,IAGU,KAKnBA,MAAQ,UAJJC,YAAmBC,KAAK,CAACH,SAAUI,KAAY,CAACC,UAAS,IACzDF,KAAKG,gB,iDAKT,WAAiB,IAAD,OACRC,MAAgB,iBAAiBC,MAC7B,SAACC,GAEDA,EAASC,OAAOF,MACZ,SAACE,GAAD,OAASC,aAAY,kBAAI,EAAKX,SAASU,KAClCF,KAAK,EAAKP,MAAQ,QAClBW,MAAM,EAAKX,MAAQ,kB,2BAKxC,SAAeY,GACXN,MAAgB,gBAAiB,CAC7BO,OAAQ,OACRC,QAAS,CACL,eAAgB,mBAChB,OAAU,oBAEdC,KAAMC,KAAKC,UAAUL,KACtBL,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UACxBF,MAAM,SAAAC,GACHU,QAAQC,IAAIX,MAEfG,OAAM,SAACS,GACJF,QAAQC,IAAIC,MAEfb,KAAKL,KAAKG,qB,qBCTRgB,mBA7Bf,WAEI,OACI,qBAAKC,UAAU,MAAf,SACI,yBAAQA,UAAU,aAAlB,UACI,yCAAYzB,EAAaG,SACzB,gCACI,cAACuB,EAAA,EAAD,CAAQC,QAAS,kBAAI3B,EAAa4B,cAAc,YAAhD,6BACA,0BAEJ,8BACI,sBAAMH,UAAWI,UAAQC,KAAMC,YAAU,EAACC,aAAa,MAAvD,SACI,cAACC,EAAA,EAAD,CAAWC,GAAG,eAAeC,MAAM,SAASC,QAAQ,eAG5D,uBACA,8BACI,6BACKpC,EAAaE,SAASmC,KAAI,SAACC,EAAYC,GAAb,OACvB,6BAAeD,GAANC,kB,OCftBC,EARDC,aAAW,YAAoB,IAAlBC,EAAiB,EAAjBA,QAAQC,EAAS,EAATA,MAG/B,OAFAtB,QAAQC,IAAIoB,GACZrB,QAAQC,IAAIqB,GACL,gCAAK,wCAAWA,EAAMC,OAAOC,QAChC,cAACnB,EAAA,EAAD,CAAQU,QAAQ,YAAYU,MAAM,UAAUnB,QAAS,kBAAIe,EAAQK,KAAK,MAAtE,+BCKOC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBxC,MAAK,YAAkD,IAA/CyC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,QCCdO,IAASC,OACH,cAAC,IAAD,UACI,eAAC,IAAD,WACI,cAAC,IAAD,CAAOC,KAAM,OAAQC,UAAWC,IAChC,cAAC,IAAD,CAAOF,KAAM,eAAgBC,UAAWnB,IACxC,cAAC,IAAD,CAAOqB,OAAK,EAACH,KAAM,IAAKD,OAAQ,kBAAI,8CACpC,cAAC,IAAD,CAAOA,OAAQ,kBAAI,6CAG/BK,SAASC,eAAe,SAM1Bf,M","file":"static/js/main.4237faf1.chunk.js","sourcesContent":["import {makeAutoObservable, observable, runInAction} from \"mobx\"\n\nconst baseUrl = process.env.NODE_ENV === 'development' ?\n    \"http://localhost:8080/\":\"\"; //Check if dev environment\n\nclass GiraffeStore {\n\n    giraffes = [\"Loading Giraffes...\"];\n    state = [\"\"];\n\n\n    constructor(props) {\n        makeAutoObservable(this,{giraffes: observable},{autoBind:true});\n        this.fetchGiraffes();\n    }\n\n    state = \"Loading\"\n\n    fetchGiraffes (){\n            fetch(baseUrl + \"rest/giraffes\").then(\n                (response)=>\n                {\n                response.json().then(\n                    (json)=> runInAction(()=>this.giraffes=json)\n                        .then(this.state = \"Done\")\n                        .catch(this.state = \"Failed\")\n                )}\n            )\n    }\n\n    postGiraffess (newGiraffe) {\n        fetch(baseUrl + \"rest/giraffes\", {\n            method: 'post',\n            headers: {\n                'Content-Type': 'application/json',\n                'Accept': 'application/json',\n            },\n            body: JSON.stringify(newGiraffe)\n        }).then(response => response.json())\n            .then( response => {\n                console.log(response)\n            })\n            .catch((error) => {\n                console.log(error)\n            })\n            .then(this.fetchGiraffes()\n        )}\n\n   // postGiraffess (newGiraffe) {\n      //  fetch(baseUrl + \"rest/giraffes\", {\n        //    method: 'post',\n          //  headers: {\n            //    'Content-Type': 'application/json',\n              //  'Accept': 'application/json',\n           // },\n           // body: JSON.stringify(newGiraffe)\n       // }).then(function (response) {\n         //   return response.json();\n       // }).then(this.fetchGiraffes()\n       // )}\n\n\n}\n\nexport const giraffestore = new GiraffeStore();","import './App.css';\nimport Button from \"@material-ui/core/Button\";\nimport {TextField} from \"@material-ui/core\";\nimport {classes} from \"istanbul-lib-coverage\";\nimport {giraffestore} from \"./GiraffeStore\";\nimport { observer } from \"mobx-react-lite\";\n\nfunction App() {\n\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                <h1>State: {giraffestore.state}</h1>\n                <div>\n                    <Button onClick={()=>giraffestore.postGiraffess(\"Karsten\")}>Tilf√∏j giraf</Button>\n                    <h1></h1>\n                </div>\n                <div>\n                    <form className={classes.root} noValidate autoComplete=\"off\">\n                        <TextField id=\"filled-basic\" label=\"Filled\" variant=\"filled\" />\n                    </form>\n                </div>\n                <h1></h1>\n                <div>\n                    <ul>\n                        {giraffestore.giraffes.map((giraffeName,key)=>\n                            <li key={key}>{giraffeName}</li>\n                        )}\n                    </ul>\n                </div>\n            </header>\n        </div>\n\n    );\n}\n\nexport default observer(App);\n","import Button from \"@material-ui/core/Button\";\nimport { withRouter } from \"react-router\";\n\nconst About = withRouter(({history,match})=>{\n    console.log(history);\n    console.log(match);\n    return <div><h1>About {match.params.text}</h1>\n        <Button variant=\"contained\" color=\"primary\" onClick={()=>history.push(\"/\")}>Go to front</Button>\n    </div>\n});\n\nexport default About;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport About from './About';\nimport reportWebVitals from './reportWebVitals';\nimport {HashRouter, Route, Switch } from \"react-router-dom\";\n\nReactDOM.render(\n      <HashRouter>\n          <Switch>\n              <Route path={\"/app\"} component={App}></Route>\n              <Route path={\"/about/:text\"} component={About}></Route>\n              <Route exact path={\"/\"} render={()=><h1>Startside</h1>}></Route>\n              <Route render={()=><h1>404</h1>}/>\n          </Switch>\n      </HashRouter>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}